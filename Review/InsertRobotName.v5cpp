{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor MotorGroup1MotorA = motor(PORT1, ratio18_1, false);\nmotor MotorGroup1MotorB = motor(PORT2, ratio18_1, false);\nmotor_group MotorGroup1 = motor_group(MotorGroup1MotorA, MotorGroup1MotorB);\n\ncontroller Controller1 = controller(primary);\nmotor MotorGroup2MotorA = motor(PORT3, ratio18_1, false);\nmotor MotorGroup2MotorB = motor(PORT4, ratio18_1, false);\nmotor_group MotorGroup2 = motor_group(MotorGroup2MotorA, MotorGroup2MotorB);\n\nmotor MotorGroup3MotorA = motor(PORT5, ratio18_1, false);\nmotor MotorGroup3MotorB = motor(PORT6, ratio18_1, false);\nmotor_group MotorGroup3 = motor_group(MotorGroup3MotorA, MotorGroup3MotorB);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Lakeside Robotics                                         */\n/*    Created:      January 16 2023                                           */\n/*    Description:  Operates the robot                                        */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//In percentage represents how fast rotation needs to be\n\n//Kellan Controls -> Later add mario kart controls?\n/*\nWarning: We Need to test these first before we add default forward, left, right, and backward\nex: if one axis position is at 0, you need to move in one direction w/o rotation\n@minRotationForce is the minimum rotation force of motors\n@maxRotationForce is the maximum force that motors are set too because if one motor moves quicker than the other\nthent the robot is sure to turn\n*/\nvoid movement(int minRotationForce, int maxRotationForce){\n        if(Controller1.Axis4.position() < 0 && Controller1.Axis4.position()) {\n      //idk if all the motor groups will spin at the same time, it depends how the computer reads it\n      MotorGroup1MotorA.setVelocity(maxRotationForce, percent);\n      //Would need to implent later a feature that determines turn based off of joystick force\n      MotorGroup2MotorA.setVelocity(maxRotationForce, percent);\n      MotorGroup3MotorA.setVelocity(maxRotationForce, percent);\n      MotorGroup1.spin(forward);\n      MotorGroup2.spin(forward);\n      MotorGroup3.spin(forward);\n\n    } else if (Controller1.Axis4.position() < 0 && Controller1.Axis3.position() > 0){\n      //Quadrant II\n      MotorGroup1MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup2MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup3MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup1.spin(forward);\n      MotorGroup2.spin(forward);\n      MotorGroup3.spin(forward);\n    } else if (Controller1.Axis4.position() < 0 && Controller1.Axis3.position() < 0) {\n      //Quadrant III\n      MotorGroup1MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup2MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup3MotorB.setVelocity(maxRotationForce, percent);\n      MotorGroup1.spin(reverse);\n      MotorGroup2.spin(reverse);\n      MotorGroup3.spin(reverse);\n    } else if (Controller1.Axis4.position() > 0 && Controller1.Axis3.position() < 0) {\n      //Quadrant IV\n      MotorGroup1MotorA.setVelocity(maxRotationForce, percent);\n      MotorGroup2MotorA.setVelocity(maxRotationForce, percent);\n      MotorGroup3MotorA.setVelocity(maxRotationForce, percent);\n      MotorGroup1MotorA.spin(reverse);\n      MotorGroup2MotorA.spin(reverse);\n      MotorGroup3MotorA.spin(reverse);\n    } else if (Controller1.Axis4.position() == 0 && Controller1.Axis4.position()) {\n      //origin\n      MotorGroup1.stop();\n      MotorGroup2.stop();\n      MotorGroup3.stop();\n    }\n  }\n\n//Shows current coordinates of axis \n//@time is the update time for the screen to change in seconds\n//This method allows us to see the position of the joycons\nvoid screenCoords(double time){\n  Brain.Screen.setCursor(1,1);\n  Brain.Screen.print(Controller1.Axis3.position());\n  Brain.Screen.setCursor(3, 1);\n  Brain.Screen.print(Controller1.Axis4.position());\n  wait(time, seconds); //Probably don't need this line\n  Brain.Screen.clearScreen();\n}\n\nvoid autonomous() {\n  //forward\n  //backward\n  //left\n  //right\n  //turn\n}\n\nvoid ultimateRageMode(){\n  //under development\n}\n\n/*\nMain method runs the robot during a non atonoumous period of time\n*/\nint main() {\n  //Controls turn\n  int minRotationForce = 50;\n  int maxRotationForce = 75;\n  double brainScreenUpdate = 0.5;\n\n  //start up sequence\n  Brain.Screen.print(\"working\");\n\n  MotorGroup1.spin(forward);\n  wait(1,seconds);\n  MotorGroup1.stop(); //will be using degrees for this\n  \n  while (true) {\n    MotorGroup1.setVelocity(minRotationForce, percent);\n    MotorGroup2.setVelocity(minRotationForce, percent);\n    MotorGroup3.setVelocity(minRotationForce, percent);\n    movement(minRotationForce, maxRotationForce);\n    screenCoords(brainScreenUpdate);\n    if (Controller1.ButtonX.pressing() == true) {\n      autonomous();\n    }\n    if (Controller1.ButtonY.pressing() == true) {\n      ultimateRageMode();\n    }\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1,2],"name":"MotorGroup1","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3,4],"name":"MotorGroup2","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"}},{"port":[5,6],"name":"MotorGroup3","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}